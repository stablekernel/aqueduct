import 'schema.dart';
import '../persistent_store/persistent_store.dart';

/// Used during migration to modify a schema.
class SchemaBuilder {
  /// Creates a builder starting from an existing schema.
  SchemaBuilder(this.store, this.inputSchema, {this.isTemporary: false}) {
    schema = new Schema.from(inputSchema);
  }

  /// Creates a builder starting from the empty schema.
  SchemaBuilder.toSchema(this.store, Schema targetSchema,
      {this.isTemporary: false}) {
    schema = new Schema.empty();
    targetSchema.dependencyOrderedTables.forEach((t) {
      createTable(t);
    });
  }

  /// The starting schema of this builder.
  Schema inputSchema;

  /// The resulting schema of this builder as operations are applied to it.
  Schema schema;

  /// The persistent store to validate and construct operations.
  PersistentStore store;

  /// Whether or not this builder should create temporary tables.
  bool isTemporary;

  /// A list of SQL commands generated by operations performed on this builder.
  List<String> commands = [];

  /// Validates and adds a table to [schema].
  void createTable(SchemaTable table) {
    schema.addTable(table);

    if (store != null) {
      commands.addAll(store.createTable(table, isTemporary: isTemporary));
    }
  }

  /// Validates and renames a table in [schema].
  void renameTable(String currentTableName, String newName) {
    var table = schema.tableForName(currentTableName);
    if (table == null) {
      throw new SchemaException("Table ${currentTableName} does not exist.");
    }

    schema.renameTable(table, newName);
    if (store != null) {
      commands.addAll(store.renameTable(table, newName));
    }
  }

  /// Validates and deletes a table in [schema].
  void deleteTable(String tableName) {
    var table = schema.tableForName(tableName);
    if (table == null) {
      throw new SchemaException("Table ${tableName} does not exist.");
    }

    schema.removeTable(table);

    if (store != null) {
      commands.addAll(store.deleteTable(table));
    }
  }

  /// Validates and adds a column to a table in [schema].
  void addColumn(String tableName, SchemaColumn column, {String unencodedInitialValue}) {
    var table = schema.tableForName(tableName);
    if (table == null) {
      throw new SchemaException("Table ${tableName} does not exist.");
    }

    table.addColumn(column);
    if (store != null) {
      commands.addAll(store.addColumn(table, column, unencodedInitialValue: unencodedInitialValue));
    }
  }

  /// Validates and deletes a column in a table in [schema].
  void deleteColumn(String tableName, String columnName) {
    var table = schema.tableForName(tableName);
    if (table == null) {
      throw new SchemaException("Table ${tableName} does not exist.");
    }

    var column = table.columnForName(columnName);
    if (column == null) {
      throw new SchemaException("Column ${columnName} does not exists.");
    }

    table.removeColumn(column);

    if (store != null) {
      commands.addAll(store.deleteColumn(table, column));
    }
  }

  /// Validates and renames a column in a table in [schema].
  void renameColumn(String tableName, String columnName, String newName) {
    var table = schema.tableForName(tableName);
    if (table == null) {
      throw new SchemaException("Table ${tableName} does not exist.");
    }

    var column = table.columnForName(columnName);
    if (column == null) {
      throw new SchemaException("Column ${columnName} does not exists.");
    }

    table.renameColumn(column, newName);

    if (store != null) {
      commands.addAll(store.renameColumn(table, column, newName));
    }
  }

  /// Validates and alters a column in a table in [schema].
  ///
  /// Alterations are made by setting properties of the column passed to [modify]. If the column's nullability
  /// changes from nullable to not nullable,  all previously null values for that column
  /// are set to the value of [unencodedInitialValue].
  ///
  /// Example:
  ///
  ///         database.alterColumn("table", "column", (c) {
  ///           c.isIndexed = true;
  ///           c.isNullable = false;
  ///         }), unencodedInitialValue: "0");
  void alterColumn(String tableName, String columnName,
      void modify(SchemaColumn targetColumn),
      {String unencodedInitialValue}) {
    var table = schema.tableForName(tableName);
    if (table == null) {
      throw new SchemaException("Table ${tableName} does not exist.");
    }

    var existingColumn = table[columnName];
    if (existingColumn == null) {
      throw new SchemaException("Column ${columnName} does not exist.");
    }

    var newColumn = new SchemaColumn.from(existingColumn);
    modify(newColumn);

    if (existingColumn.type != newColumn.type) {
      throw new SchemaException(
          "May not change column type for '${existingColumn.name}' in '$tableName' (${existingColumn.typeString} -> ${newColumn.typeString})");
    }

    if (existingColumn.autoincrement != newColumn.autoincrement) {
      throw new SchemaException(
          "May not change column autoincrementing behavior for '${existingColumn.name}' in '$tableName'");
    }

    if (existingColumn.isPrimaryKey != newColumn.isPrimaryKey) {
      throw new SchemaException(
          "May not change column primary key status for '${existingColumn.name}' in '$tableName'");
    }

    if (existingColumn.relatedTableName != newColumn.relatedTableName) {
      throw new SchemaException(
          "May not change reference table for foreign key column '${existingColumn.name}' in '$tableName' (${existingColumn.relatedTableName} -> ${newColumn.relatedTableName})");
    }

    if (existingColumn.relatedColumnName != newColumn.relatedColumnName) {
      throw new SchemaException(
          "May not change reference column for foreign key column '${existingColumn.name}' in '$tableName' (${existingColumn.relatedColumnName} -> ${newColumn.relatedColumnName})");
    }

    if (existingColumn.name != newColumn.name) {
      renameColumn(tableName, existingColumn.name, newColumn.name);
    }

    if (existingColumn.isNullable == true &&
        newColumn.isNullable == false &&
        unencodedInitialValue == null &&
        newColumn.defaultValue == null) {
      throw new SchemaException(
          "May not change column '${existingColumn.name}' in '$tableName' to be nullable without defaultValue or unencodedInitialValue.");
    }

    table.replaceColumn(existingColumn, newColumn);

    if (store != null) {
      if (existingColumn.isIndexed != newColumn.isIndexed) {
        if (newColumn.isIndexed) {
          commands.addAll(store.addIndexToColumn(table, newColumn));
        } else {
          commands.addAll(store.deleteIndexFromColumn(table, newColumn));
        }
      }

      if (existingColumn.isUnique != newColumn.isUnique) {
        commands.addAll(store.alterColumnUniqueness(table, newColumn));
      }

      if (existingColumn.defaultValue != newColumn.defaultValue) {
        commands.addAll(store.alterColumnDefaultValue(table, newColumn));
      }

      if (existingColumn.isNullable != newColumn.isNullable) {
        commands.addAll(store.alterColumnNullability(
            table, newColumn, unencodedInitialValue));
      }

      if (existingColumn.deleteRule != newColumn.deleteRule) {
        commands.addAll(store.alterColumnDeleteRule(table, newColumn));
      }
    }
  }

  //todo: Transitionary code that can be removed at 3.0
  @deprecated
  static String sourceForSchemaUpgrade(
      Schema existingSchema, Schema newSchema, int version) {
    var builder = new StringBuffer();
    builder.writeln("import 'package:aqueduct/aqueduct.dart';");
    builder.writeln("import 'dart:async';");
    builder.writeln("");
    builder.writeln("class Migration$version extends Migration {");
    builder.writeln("  Future upgrade() async {");

    var existingTableNames = existingSchema.tables.map((t) => t.name).toList();

    newSchema.dependencyOrderedTables
        .where((t) => !existingTableNames.contains(t.name))
        .forEach((t) {
      builder.writeln(_createTableString(t, "    "));
    });

    builder.writeln("  }");
    builder.writeln("");
    builder.writeln("  Future downgrade() async {");
    builder.writeln("  }");
    builder.writeln("  Future seed() async {");
    builder.writeln("  }");
    builder.writeln("}");

    return builder.toString();
  }

  //todo: Transitionary code that can be removed at 3.0
  @deprecated
  static String _createTableString(SchemaTable table, String spaceOffset,
      {bool temporary: false}) {
    var builder = new StringBuffer();
    builder.writeln(
        '${spaceOffset}database.createTable(new SchemaTable("${table.name}", [');
    table.columns.forEach((col) {
      builder.writeln("${spaceOffset}${_newColumnString(table, col, "  ")},");
    });
    builder.writeln('${spaceOffset}]));');

    return builder.toString();
  }

  //todo: Transitionary code that can be removed at 3.0
  @deprecated
  static String _newColumnString(
      SchemaTable table, SchemaColumn column, String spaceOffset) {
    var builder = new StringBuffer();
    if (column.relatedTableName != null) {
      builder.write(
          '${spaceOffset}new SchemaColumn.relationship("${column.name}", ${column.type}');
      builder.write(", relatedTableName: \"${column.relatedTableName}\"");
      builder.write(", relatedColumnName: \"${column.relatedColumnName}\"");
      builder.write(", rule: ${column.deleteRule}");
    } else {
      builder.write(
          '${spaceOffset}new SchemaColumn("${column.name}", ${column.type}');
      if (column.isPrimaryKey) {
        builder.write(", isPrimaryKey: true");
      } else {
        builder.write(", isPrimaryKey: false");
      }
      if (column.autoincrement) {
        builder.write(", autoincrement: true");
      } else {
        builder.write(", autoincrement: false");
      }
      if (column.defaultValue != null) {
        builder.write(', defaultValue: "${column.defaultValue}"');
      }
      if (column.isIndexed) {
        builder.write(", isIndexed: true");
      } else {
        builder.write(", isIndexed: false");
      }
    }

    if (column.isNullable) {
      builder.write(", isNullable: true");
    } else {
      builder.write(", isNullable: false");
    }
    if (column.isUnique) {
      builder.write(", isUnique: true");
    } else {
      builder.write(", isUnique: false");
    }

    builder.write(")");
    return builder.toString();
  }

}
